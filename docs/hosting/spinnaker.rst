Spinnaker
=========

Introduction
------------

`Spinnaker <https://www.spinnaker.io/>`_ is the multi-cloud continuous delivery platform that we are using to manage all the containerised applications and services. Spinnaker was initially built and open-sourced by Netflix and is now gaining wide adoption across the industry.

Core Concepts
-------------

At the core of how Spinnaker works is the immutable infrastructure paradigm. All infrastructure set up in Spinnaker (either manually or via automated deployment pipelines) does not change existing infrastructure definitions. Rather the existing definitions are cloned, and during this cloning process the parameters of the definitions can be updated or changed.

This guarantees that a specific version of an infrastructure definition is always exactly the way it was set up and cannot drift with temporary or accidental changes.

Spinnaker provides two key features:

Cluster Management
~~~~~~~~~~~~~~~~~~

We use Spinnaker's cluster management features to manage our containers that are running across the multiple DC/OS clusters.

There are a couple of key terms that Spinnaker uses that have a specific meaning in Docker / Container based infrastructure environments like the Girl Effect Core Infrastructure environment:

Server Group
    The base resource, the Server Group, identifies the deployable artefact (Docker images) and basic configuration settings such as number of instances, metadata, etc. When deployed, a Server Group is a collection of instances of the running software (Docker instances).

    Server groups follow the application-stack-detail-version naming convention.

Cluster
    You can define Clusters, which are logical groupings of Server Groups in Spinnaker. These groups are based on the application-stack-detail naming convention.

Applications
    Applications are logical groupings of Clusters in Spinnaker from the application-stack-detail naming convention.

.. _spinnaker-naming-convention:

As described above, Spinnaker follows a specific naming convention when creating resources:

.. epigraph::
    <application>-<stack>-<detail>-<version>

The **application** part of the name should be a descriptive name of the entire application stack the cluster will fall under, e.g "springster" or "tega".

The **stack** part of the name should be a descriptive name of the stack the Cluster is a part of. Generally this is either "prd" or "qa" for production and QA stacks respectively.

The **detail** part of the name can be anything that describes the role of the specific Server Group. Generally this is something like "web", "worker", "scheduler", etc.

The **version** part of the name is not specified by the user and is auto generated by Spinnaker, it represents the increasing version number of the Server Group. As Spinnaker adopts an immutable infrastructure paradigm, Server Groups cannot be modified, only cloned which increases the version number.

In the Spinnaker Server Group creation interface there is an additional naming field called **group** that comes before the stack part. It is optional and is often left blank.

Some example names are:

* springster-english-prd-web-v001
* corporatesite-prd-web-v001
* corporatesite-qa-web-v010
* corporatesite-qa-worker-v011

Deployment Management
~~~~~~~~~~~~~~~~~~~~~

We use Spinnaker's deployment management features to construct and manage continuous delivery workflows that are customised to each application or team.

Traffic Routing and HTTPS
-------------------------

Basics
~~~~~~~

Traffic is routed from external sources to containers in the cluster via HAProxy load balancers and is configured via "Labels" that are set up in Spinnaker during the Server Group configuration.

There are two wildcard domain names set up that can be used to access containers in both the QA and PRD clusters.

The QA wildcard domain is **"*.qa-hub.ie.gehosting.org"** and the PRD wildcard domain is **"*.prd-hub.ie.gehosting.org"**

Other domains can also be used when required, as long as they have the correct DNS entries set up.

There is also a mechanism to auto-generate and serve HTTPS certificates using our integration with `Lets Encrypt <https://letsencrypt.org>`_ when specifying the correct label.

How-to
~~~~~~

When you want to route traffic from the outside world to one of your server groups you need to specify the following to labels in the Spinnaker Server Group setup wizard under the Labels section:

HAPROXY_0_VHOST
    A comma separated list of domains to route traffic for, e.g. key = HAPROXY_0_VHOST value = testapp.qa-hub.ie.gehosting.org

HAPROXY_GROUP
    Should always be set to the string "external", e.g. key = HAPROXY_GROUP value = external

If you do not specify these two labels, no traffic from outside of the cluster will be routed to your server group.

If you want an auto-generated HTTPS certificate you can specify the following label:

MARATHON_ACME_0_DOMAIN
    The domain you want to auto-generate and serve a Lets Encrypt certificate for, e.g. key = MARATHON_ACME_0_DOMAIN value = testapp.qa-hub.ie.gehosting.org
